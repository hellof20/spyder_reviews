AWSTemplateFormatVersion: 2010-09-09
Description: comprehend analyize on AWS.
Parameters:
  ecsimage:
    Type: String
    Default: "hellof20/reviews:spacy"
  VPC:
    Type: AWS::EC2::VPC::Id
  publicSubnetA:
    Type: AWS::EC2::Subnet::Id
  publicSubnetB:
    Type: AWS::EC2::Subnet::Id
  ServiceName:
    Type: String
    Default: comprehend
  appkey:
    Type: String
    Default: app.csv
    Description: The description file name 
  bucketname:
    Default: pwm-virginia
    Type: String
    Description: The description file s3 location
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 8-41.
    Description: The database admin account password. (Choose a secure password)
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DatabaseUsername:
    Default: "admin"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 1-16
    Description: The database admin account user name. (Default "prisma")
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DatabaseName:
    Default: "reviews"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 1-16
    Description: The database admin account user name. (Default "prisma")
    MaxLength: '16'
    MinLength: '1'
    Type: String

Resources:
  MyFunc:
    Type: AWS::Lambda::Function
    Properties:
        Code: 
          S3Bucket: pwm-virginia
          S3Key: function.zip
        Handler: app.handler
        Role: !GetAtt MyFuncRole.Arn
        Runtime: python3.7
        Timeout: 60
        VpcConfig:
            SecurityGroupIds:
                - !Ref DatabaseSecurityGroup
            SubnetIds:
                - !Ref publicSubnetA
                - !Ref publicSubnetB
        Environment:
          Variables:
            db_endpoint: !GetAtt RDSCluster.Endpoint.Address
            db_name: 
              Ref: DatabaseName
            db_password: 
              Ref: DatabasePassword
            db_username: 
              Ref: DatabaseUsername

  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MyFunc
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt MyFunc.Arn
      
  MyFuncRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: !Join ['', [!Ref ServiceName, MyFuncRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: policyforlambda
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: '*'
                  Resource: '*'            
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: 
        Ref: DatabaseUsername
      MasterUserPassword: 
        Ref: DatabasePassword
      DatabaseName: 
        Ref: DatabaseName
      Engine: aurora
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 16
        MinCapacity: 2
        SecondsUntilAutoPause: 300
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 4
        MaxCapacity: 32
        SecondsUntilAutoPause: 1000
  Cluster: 
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
        DBSubnetGroupDescription: Database subnet group. Suggest put database in private subnet.
        SubnetIds:
            - !Ref publicSubnetA
            - !Ref publicSubnetB

  DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId: !Ref VPC
          GroupDescription: Access to database
          SecurityGroupIngress:
                FromPort: 3306
                ToPort: 3306
                IpProtocol: tcp
                CidrIp: 0.0.0.0/0
          Tags: 
              - Key: Name
                Value: keycloak-security-group

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 4096
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 30GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          # Image: 'jboss/keycloak'
          Image: !Ref ecsimage
          Environment:
            - Name: rdshost
              Value: !GetAtt RDSCluster.Endpoint.Address
            - Name: rdsuser
              Value: !Ref DatabaseUsername
            - Name: rdspassword
              Value: !Ref DatabasePassword
            - Name: rdsdatabase
              Value: !Ref DatabaseName
            - Name: appbucket
              Value: !Ref bucketname
            - Name: appkey
              Value: !Ref appkey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: policyfortask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  ScheduleRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AWS_Events_Invoke_ECS_Role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com 
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: policyfortask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
  ScheduledTaskRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(1 day)'
      State: ENABLED
      RoleArn: !GetAtt ScheduleRuleRole.Arn
      Targets:
        - Arn: !GetAtt Cluster.Arn
          RoleArn: !GetAtt ScheduleRuleRole.Arn
          Id: "randomstring"
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                SecurityGroups:
                  - !Ref ContainerSecurityGroup
                Subnets:
                  - !Ref publicSubnetA
                  - !Ref publicSubnetB
                AssignPublicIp: "ENABLED"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]